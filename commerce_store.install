<?php
/**
 * @file
 * Install for a Store entity - need to create the base table for our entity.
 */

/**
 * Implements hook_requirements().
 */
function commerce_store_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  // During installation make sure that commerce_store entity doesn't exist yet.
  if ($phase == 'install') {
    $entities = entity_get_info();
    if (isset($entities['commerce_store'])) {
      $requirements['commerce_store'] = array(
        'description' => $t("Entity <em>commerce_store</em> already exists. Please make sure it doesn't exist before enabling this module."),
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Entity exists'),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function commerce_store_schema() {
  $schema = array();

  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['commerce_store'] = array(
    'description' => 'The base table for stores.',
    'fields' => array(
      'store_id' => array(
        'description' => 'The primary identifier for a store, used internally only.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'revision_id' => array(
        'description' => 'The current {commerce_store_revision}.revision_id version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'The module defined type of this store.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The {languages}.language of this store.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of this store, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that created this store.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether or not the store appears in lists and may be used in other entities.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the store was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the store was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('store_id'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'unique keys' => array(
      'revision_id' => array('revision_id'),
    ),
    'foreign keys' => array(
      'current_revision' => array(
        'table' => 'commerce_store_revision',
        'columns'=> array('revision_id' => 'revision_id'),
      ),
      'creator' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['commerce_store_revision'] = array(
    'description' => 'Saves information about each saved revision of a {commerce_store}.',
    'fields' => array(
      'store_id' => array(
        'description' => 'The {commerce_store}.store_id of the store this revision belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'revision_id' => array(
        'description' => 'The primary identifier for this revision.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The title of this store for this revision',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'revision_uid' => array(
        'description' => 'The {users}.uid that owns the store at this revision.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The status of this revision.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data for this revision.',
      ),
    ),
    'primary key' => array('revision_id'),
    'indexes' => array(
      'store_id' => array('store_id'),
      'revision_uid' => array('revision_uid'),
    ),
    'foreign keys' => array(
      'store' => array(
        'table' => 'commerce_store',
        'columns' => array('store_id' => 'store_id'),
      ),
      'owner' => array(
        'table' => 'users',
        'columns' => array('revision_uid' => 'uid'),
      ),
    ),
  );

  return $schema;
}


/*
 * Implements hook_uninstall().
 */
function commerce_store_uninstall() {
  // Delete any field instance attached to a store type.
  module_load_include('module', 'commerce');
  commerce_delete_instances('commerce_store');
}
